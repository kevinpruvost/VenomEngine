// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TEXTURE_VENOM_COMMON_H_
#define FLATBUFFERS_GENERATED_TEXTURE_VENOM_COMMON_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

namespace venom {
namespace common {

struct TextureData;
struct TextureDataBuilder;

struct TextureData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef TextureDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_WIDTH = 4,
    VT_HEIGHT = 6,
    VT_CHANNELS = 8,
    VT_AVERAGE_LUMINANCE = 10,
    VT_PEAK_LUMINANCE = 12,
    VT_DATA = 14
  };
  int32_t width() const {
    return GetField<int32_t>(VT_WIDTH, 0);
  }
  int32_t height() const {
    return GetField<int32_t>(VT_HEIGHT, 0);
  }
  int32_t channels() const {
    return GetField<int32_t>(VT_CHANNELS, 0);
  }
  float average_luminance() const {
    return GetField<float>(VT_AVERAGE_LUMINANCE, 0.0f);
  }
  float peak_luminance() const {
    return GetField<float>(VT_PEAK_LUMINANCE, 0.0f);
  }
  const ::flatbuffers::Vector<uint8_t> *data() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_DATA);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_WIDTH, 4) &&
           VerifyField<int32_t>(verifier, VT_HEIGHT, 4) &&
           VerifyField<int32_t>(verifier, VT_CHANNELS, 4) &&
           VerifyField<float>(verifier, VT_AVERAGE_LUMINANCE, 4) &&
           VerifyField<float>(verifier, VT_PEAK_LUMINANCE, 4) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           verifier.EndTable();
  }
};

struct TextureDataBuilder {
  typedef TextureData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_width(int32_t width) {
    fbb_.AddElement<int32_t>(TextureData::VT_WIDTH, width, 0);
  }
  void add_height(int32_t height) {
    fbb_.AddElement<int32_t>(TextureData::VT_HEIGHT, height, 0);
  }
  void add_channels(int32_t channels) {
    fbb_.AddElement<int32_t>(TextureData::VT_CHANNELS, channels, 0);
  }
  void add_average_luminance(float average_luminance) {
    fbb_.AddElement<float>(TextureData::VT_AVERAGE_LUMINANCE, average_luminance, 0.0f);
  }
  void add_peak_luminance(float peak_luminance) {
    fbb_.AddElement<float>(TextureData::VT_PEAK_LUMINANCE, peak_luminance, 0.0f);
  }
  void add_data(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> data) {
    fbb_.AddOffset(TextureData::VT_DATA, data);
  }
  explicit TextureDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<TextureData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<TextureData>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<TextureData> CreateTextureData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t width = 0,
    int32_t height = 0,
    int32_t channels = 0,
    float average_luminance = 0.0f,
    float peak_luminance = 0.0f,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> data = 0) {
  TextureDataBuilder builder_(_fbb);
  builder_.add_data(data);
  builder_.add_peak_luminance(peak_luminance);
  builder_.add_average_luminance(average_luminance);
  builder_.add_channels(channels);
  builder_.add_height(height);
  builder_.add_width(width);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<TextureData> CreateTextureDataDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t width = 0,
    int32_t height = 0,
    int32_t channels = 0,
    float average_luminance = 0.0f,
    float peak_luminance = 0.0f,
    const std::vector<uint8_t> *data = nullptr) {
  auto data__ = data ? _fbb.CreateVector<uint8_t>(*data) : 0;
  return venom::common::CreateTextureData(
      _fbb,
      width,
      height,
      channels,
      average_luminance,
      peak_luminance,
      data__);
}

inline const venom::common::TextureData *GetTextureData(const void *buf) {
  return ::flatbuffers::GetRoot<venom::common::TextureData>(buf);
}

inline const venom::common::TextureData *GetSizePrefixedTextureData(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<venom::common::TextureData>(buf);
}

inline bool VerifyTextureDataBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<venom::common::TextureData>(nullptr);
}

inline bool VerifySizePrefixedTextureDataBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<venom::common::TextureData>(nullptr);
}

inline void FinishTextureDataBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<venom::common::TextureData> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedTextureDataBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<venom::common::TextureData> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace common
}  // namespace venom

#endif  // FLATBUFFERS_GENERATED_TEXTURE_VENOM_COMMON_H_
